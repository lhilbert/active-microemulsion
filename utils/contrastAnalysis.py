#!/usr/bin/env python3

# contrastAnalysis.py
# Script for analyzing simulated "microscopy" images generated by active-microemulsion
#

import argparse
import cv2
import numpy as np
# from scipy import signal
import os
from matplotlib import pyplot as plt


def computeCov(data):
    return np.std(data) / np.mean(data)


if __name__ == "__main__":
    # Manage command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("inputFiles", help="The image file to perform measurements on", nargs='+')
    parser.add_argument("-b", "--blur-radius", help="Radius of gaussian blur", dest="blurRadius", type=int, default=3)
    parser.add_argument("-m", "--moving-average-window", help="Length of the moving average window",
                        dest="movingAvgWindow", type=int, default=7)

    args = parser.parse_args()
    #
    firstFile = args.inputFiles[0]
    if firstFile[-1] == '_':
        args.inputFiles = \
            [firstFile + str(i) + ".pgm" for i in range(101)]
    covList = []
    for f in args.inputFiles:
        img = cv2.imread(f)
        blur = cv2.GaussianBlur(img, (args.blurRadius, args.blurRadius), 0)
        cov = computeCov(blur)
        covList.append(cov)
        print("> %s : CoV = %f" % (os.path.basename(f), cov))

    X = range(len(args.inputFiles))
    # Remove the first k entries as meaningless
    k = 1
    X = X[k:]
    covList = covList[k:]
    # # Polynomial fit
    # P = np.polyfit(X, covList, 5)
    # p = np.poly1d(P)
    # Pfit = p(X)
    # Moving average
    n = args.movingAvgWindow  # Must be an odd number
    MA = np.convolve(covList, np.ones((n,)) / n, mode='valid')
    # Find argmax of the moving average
    argmaxMA = np.argmax(MA)

    # Plotting
    plotHeight = np.max(covList) - np.min(covList)
    fig, ax = plt.subplots()
    ax.plot(X, covList)
    # plt.plot(X, Pfit)
    offsetMA = int((n - 1) / 2)
    ax.plot(X[offsetMA:-offsetMA], MA)
    maxMA = MA[argmaxMA]
    maxCovX = k + offsetMA + argmaxMA
    ax.annotate('Maximum CoV @ x=%d' % (maxCovX),
                xy=(maxCovX, maxMA + 0.03 * plotHeight),
                xytext=(maxCovX - 10, maxMA + 0.2 * plotHeight),
                arrowprops=dict(facecolor='red', shrink=1))
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    plt.show()
# eof
