#!/usr/bin/env python3

# covRnaAnalysis.py
# Script for analyzing simulated "microscopy" images generated by active-microemulsion, it plots trajectories of
# simulations in the RNA intensity vs. DNA CoV plane.
#

import numpy as np
import os

from utilsLib import Plotter3D, FileSequence, CsvWriter, CurveAnalysis3D
from utilsLib import getEntryNearestToValue, parseArguments

scriptNickname = "covRnaTxn3D"
args = parseArguments(scriptNickname)

# Manage the inputDir vs. -X/-Y flags
if (not args.xInputFiles) or (not args.zInputFiles):
    if args.scatterPlot:
        if not args.csvInput:
            args.xInputFiles = [os.path.join(d, "microemulsion_Transcription_EXTRA.pgm") for d in args.scatterPlot]
            args.yInputFiles = [os.path.join(d, "microemulsion_RNA_EXTRA.pgm") for d in args.scatterPlot]
            args.zInputFiles = [os.path.join(d, "microemulsion_DNA_EXTRA.pgm") for d in args.scatterPlot]
        inputDirectory = "."  # Scatterplot data goes in current dir
    else:
        if not args.inputDir:
            print("ERROR: You either need to pass the inputDir or the -X & -Y flags!")
            exit(1)
        args.xInputFiles = [os.path.join(args.inputDir, "microemulsion_Transcription_*")]
        args.yInputFiles = [os.path.join(args.inputDir, "microemulsion_RNA_*")]
        args.zInputFiles = [os.path.join(args.inputDir, "microemulsion_DNA_*")]
        # Extract the base directory, so that we can by default save plot and data there
        inputDirectory = os.path.dirname(args.xInputFiles[0])
else:
    inputDirectory = os.path.dirname(args.trxInputFiles[0])

# Using input dir for plot if none was explicitly passed
plotDirectory, plotFilename = os.path.split(args.plotFileName)
if not plotDirectory:
    plotDirectory = inputDirectory
args.plotFileName = os.path.join(plotDirectory, plotFilename)

# Using input dir for csv if none was explicitly passed
csvDirectory, csvFilename = os.path.split(args.csvFileName)
if not csvDirectory:
    csvDirectory = inputDirectory
args.csvFileName = os.path.join(csvDirectory, csvFilename)

analyses = []
if args.csvInput and args.scatterPlot:
    # Just perform the actual analysis on the CSV file
    for f in args.scatterPlot:
        analysis = CurveAnalysis3D(csvFileName=f, zCovMode=True, blurRadius=args.blurRadius, quiet=args.scriptMode)
        analyses.append(analysis)
else:
    # Expanding and sorting the file list
    xFileSequence = FileSequence.expandSequence(args.xInputFiles)
    yFileSequence = FileSequence.expandSequence(args.yInputFiles)
    zFileSequence = FileSequence.expandSequence(args.zInputFiles)
    # Perform the actual analysis
    analysis = CurveAnalysis3D(xFileSequence, yFileSequence, zFileSequence, zCovMode=True, blurRadius=args.blurRadius,
                               quiet=args.scriptMode)
    analyses.append(analysis)

if args.scatterPlot:
    [analysis.setSkip(0) for analysis in analyses]
else:
    [analysis.setSkip(1) for analysis in analyses]
[analysis.setDeltaT(args.deltaT) for analysis in analyses]

###
analysis = analyses[0]  # Defaulting to 1st one

# Write analysis data to CSV
CsvWriter(analysis.resultsKeys, analysis.results).write(args.csvFileName)

# Plotting
plotter = Plotter3D(analysis.getXData(), analysis.getYData(), plotFileName=args.plotFileName,
                    xlabel="TXN Intensity", ylabel="RNA Intensity", zlabel="CoV(DNA)",
                    interactive=(not args.scriptMode),
                    scatterPlotMode=(not not args.scatterPlot),
                    thinMode=(not not args.thin))
                    # xlim=(0,1), ylim=(0,1))
# xlim=(0,200))

if args.flavopiridol > 0:
    eventTime = args.flavopiridol
    eventIndex = analysis.getSnapshotNumber().index(getEntryNearestToValue(analysis.getSnapshotNumber(), eventTime))
    plotter.addZSeries(analysis.getZData()[:eventIndex + 1])
    plotter.addZSeries(analysis.getZData()[eventIndex:], xOffset=eventIndex, yOffset=eventIndex, dashes=[4, 1])
elif args.actinomycinD > 0:
    eventTime = args.actinomycinD
    eventIndex = analysis.getSnapshotNumber().index(getEntryNearestToValue(analysis.getSnapshotNumber(), eventTime))
    plotter.addZSeries(analysis.getZData()[:eventIndex + 1])
    plotter.addZSeries(analysis.getZData()[eventIndex:], xOffset=eventIndex, yOffset=eventIndex, dashes=[4, 1])
else:
    scaleRefs = args.rescalingReferences
    percentileMode = args.percentile
    if not scaleRefs:
        [plotter.addZSeries(analysis.getZData(), X=analysis.getXData(), Y=analysis.getYData()) for analysis in analyses]
    elif len(scaleRefs) == 2:
        if percentileMode:
            xScale = analyses[0].getXPercentile(scaleRefs[0])
            yScale = analyses[0].getYPercentile(scaleRefs[1])
            print(">>> %d-percentile(X) = %f" % (scaleRefs[0], xScale))
            print(">>> %d-percentile(Y) = %f" % (scaleRefs[1], yScale))
            for analysis in analyses:
                plotter.addZSeries(analysis.getZData(),
                                   X=analysis.getXData(scaleFactor=xScale),
                                   Y=analysis.getYData(scaleFactor=yScale)
                                   )
        else:
            [plotter.addZSeries(analysis.getZData(), X=analysis.getXData(scaleFactor=scaleRefs[0]),
                                Y=analysis.getYData(scaleFactor=scaleRefs[1])) for analysis in analyses]
    else:
        raise ValueError("You need to pass either NO or 2 rescaling references!")

for event in ["flavopiridol", "actinomycinD", "cutoff"]:
    eventTime = getattr(args, event)
    if eventTime > 0:
        nearestTimeToEvent = getEntryNearestToValue(analysis.getSnapshotNumber(), eventTime)
        nearestXToEvent = analysis.getXData()[analysis.getSnapshotNumber().index(nearestTimeToEvent)]
        nearestYToEvent = analysis.getYData()[analysis.getSnapshotNumber().index(nearestTimeToEvent)]
        nearestZToEvent = analysis.getZData()[analysis.getSnapshotNumber().index(nearestTimeToEvent)]
        # print(">>> Debug: x=%f, y=%f, z=%f" %(nearestXToEvent, nearestYToEvent, nearestZToEvent))
        # print(">>> Debug: xText=%f, yText=%f, zText=%f" %(nearestXToEvent - 0.15 * np.max(analysis.getXData()),
        #                                         nearestYToEvent + 0.1 * plotter.plotHeight))
        # print(">>> Debug: plotter.plotHeight=%f" %(plotter.plotHeight))
        plotter.ax.annotate('%s @ t=%d' % (event.capitalize(), eventTime),
                            xy=(nearestXToEvent, nearestYToEvent),
                            xytext=(
                                nearestXToEvent - 0.12 * np.max(analysis.getXData()),
                                nearestYToEvent + 0.15 * plotter.plotHeight),
                            arrowprops=dict(facecolor='green', shrink=1))

plotter.plot()

print("Plot saved at %s" % (args.plotFileName))
print("Data saved at %s" % (args.csvFileName))
# eof
